1. Basic information

Team number:16
Student ID of submitter: 1427309
Student Name of submitter: Zhixu Wang
Other Team Members: Eduardo Chavez, Gaoyang Wang


2. Internal Record Format
- Show your record format design and describe how your design satisfies O(1) field access. If not, just mention that you haven't implemented this feature.

We divided each record into these parts:
{Number of Attributes, Null Indicators, Directory of offsets for closing off each attribute, Attribute values}
O(1) reads are achieved because the system knows where each field ends, so every lookup operation knowing the order of attributes can jump
straight to the record offset.

- Describe how you store a VarChar field.
First 4 bytes are read as Int n to determine the length of the varchar field.
The following n bytes are extracted and appended onto the record.
After the record forming completes, it seeks the final page or the first page with enough space and stores it.

3. Page Format
- Show your page format design

A graphic representation of a page filled with several records looks like the following:

[record1][record2][record3]...[    empty space    ]...[record 2 offset, record 2 length][record 1 offset, record 1 length] ->

<- [record count][vacancy offset]

Metadata about records are stored at the end of each page for easy access.
Each(record offset, record length) pair takes 4 bytes.
Record count and vacancy offset each takes 2 bytes. Vacancy offset directs the pointer directlt to where a record can potentially be placed if vacancy is large enough.


4. Implementation Detail
- Other implementation details goes here.

To insert a new record, the file manager first attempts to concatenate it at the last page of the file;
if not enough room is available, it loops through all pages from the first one and stops when a page with enough vacancy is found.
Then the record is appended to the end of the records, updating its rid's pageNum to the current pageNum, and slot number to the index of the new record. 
Given an RID, the corresponding record can be read by finding the page with the correct pageNum, then going backwards from end of page to retrieve the (record offset, record length) tuple for the desired record, and finally reading at the record offset.


